
# Check containerapp_env: az containerapp env list --resource-group study_resource_group --output table
# If not, create: run 2 commands below
# az provider register -n Microsoft.OperationalInsights --wait
# az containerapp env create --name my-app-env --resource-group study_resource_group --location southeastasia


# kiểm tra container có tồn tại không trước khi chạy curl

# az containerapp show --name flask-api-app --resource-group study_resource_group --query properties.configuration.ingress.fqdn --output tsv


# cần chạy các command này:
# az acr update -n acr123456789 --admin-enabled true

name: Deploy Flask API

on:
  push:
    branches: [ "main" ]  # Mỗi lần push lên main sẽ tự động deploy

env:
  AZURE_CONTAINER_REGISTRY: acr123456789               # Tên ACR ngắn (không có .azurecr.io)
  AZURE_CONTAINER_REGISTRY_URL: acr123456789.azurecr.io  # Địa chỉ đầy đủ dùng để push
  IMAGE_NAME: flask-api
  CONTAINER_APP_NAME: flask-api-app
  RESOURCE_GROUP: study_resource_group
  CONTAINERAPP_ENVIRONMENT: my-app-env  # Phải được tạo trước 
  # az containerapp env create \
  # --name my-app-env \
  # --resource-group study_resource_group \
  # --location southeastasia

  

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Assign AcrPush role to Service Principal
      run: |
        SP_ID=$(az ad signed-in-user show --query id -o tsv || echo ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }})
        ACR_ID=$(az acr show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query id -o tsv)
        az role assignment create \
          --assignee $SP_ID \
          --role AcrPush \
          --scope $ACR_ID || echo "AcrPush role may already be assigned."


    - name: Get ACR credentials
      id: acr-creds
      run: |
        USERNAME=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query username -o tsv)
        PASSWORD=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "passwords[0].value" -o tsv)
        echo "USERNAME=$USERNAME" >> $GITHUB_ENV
        echo "PASSWORD=$PASSWORD" >> $GITHUB_ENV

    - name: Login to ACR
      run: az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker push ${{ env.AZURE_CONTAINER_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Deploy (Create or Update) Azure Container App
      run: |
        EXISTS=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "name" \
          --output tsv 2>/dev/null || echo "")

        if [ -z "$EXISTS" ]; then
            echo "Creating Container App..."
            az containerapp create \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ env.AZURE_CONTAINER_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --environment ${{ env.CONTAINERAPP_ENVIRONMENT }} \
              --ingress external \
              --target-port 80 \
              --registry-server ${{ env.AZURE_CONTAINER_REGISTRY_URL }} \
              --registry-username $USERNAME \
              --registry-password $PASSWORD
        else
            echo "Updating Container App..."
            az containerapp update \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ env.AZURE_CONTAINER_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --registry-server ${{ env.AZURE_CONTAINER_REGISTRY_URL }} \
              --registry-username $USERNAME \
              --registry-password $PASSWORD

        fi

    - name: Wait for container app to be ready
      run: sleep 60
      
    - name: Get Container App FQDN (APP_URL)
      id: get-app-url
      run: |
        APP_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        echo "APP_URL=https://$APP_URL" >> $GITHUB_ENV

    #flask-api-app.gentlewave-c1b4ab11.southeastasia.azurecontainerapps.io
    - name: Test root endpoint
      run: curl -f ${{ env.APP_URL }}/

    - name: Test about endpoint
      run: curl -f ${{ env.APP_URL }}/about

    - name: Test API endpoint
      run: curl -f ${{ env.APP_URL }}/health

    - name: Wait for API call to complete
      run: sleep 15

    - name: Clean up Container App
      run: |
        az containerapp delete \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --yes

    - name: Delete image from ACR
      run: |
        az acr repository delete \
          --name ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --repository ${{ env.IMAGE_NAME }} \
          --yes
